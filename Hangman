logo = ''' 
 _                                             
| |                                            
| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  
| '_ \ / _` | '_ \ / _` | '_ ` _ \ / _` | '_ \ 
| | | | (_| | | | | (_| | | | | | | (_| | | | |
|_| |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                    __/ |                      
                   |___/    '''

print(logo)
word_list = ['abruptly', 'absurd', 'abyss', 'affix', 'askew', 'avenue', 'awkward', 'axiom', 'azure', 'bagpipes', 'bandwagon', 'banjo', 'bayou', 'beekeeper','bikini',
'blitz', 'blizzard', 'boggle', 'bookworm','boxcar', 'boxful', 'buckaroo', 'buffalo', 'buffoon', 'buxom', 'buzzard', 'buzzing','buzzwords', 'caliph', 'cobweb',
'cockiness', 'croquet', 'crypt', 'curacao', 'cycle', 'daiquiri', 'dirndl', 'disavow', 'dizzying', 'duplex','dwarves', 'embezzle', 'equip', 'espionage',
'euouae', 'exodus', 'faking', 'fishhook', 'fixable', 'fjord', 'flapjack', 'flopping', 'fluffiness', 'flyby', 'foxglove', 'frazzled', 'frizzled', 'fuchsia',
'funny', 'gabby', 'galaxy', 'galvanize', 'gazebo', 'giaour', 'gizmo', 'glowworm', 'glyph', 'gnarly', 'gnostic', 'gossip', 'grogginess', 'haiku', 'haphazard',
'hyphen','iatrogenic', 'icebox', 'injury', 'ivory', 'ivy','jackpot', 'jaundice', 'jawbreaker', 'jaywalk', 'jazziest', 'jazzy','jelly', 'jigsaw', 'jinx',
'jiujitsu', 'jockey', 'jogging', 'joking', 'jovial', 'joyful', 'juicy', 'jukebox', 'jumbo', 'kayak', 'kazoo', 'keyhole', 'khaki', 'kilobyte', 'kiosk', 'kitsch',
'kiwifruit', 'klutz', 'knapsack', 'larynx', 'lengths', 'lucky', 'lymph', 'marquis','matrix', 'megahertz', 'microwave', 'mnemonic', 'mystify', 'naphtha',
'nightclub','nowadays', 'numbskull', 'nymph', 'onyx', 'ovary', 'oxidize', 'oxygen', 'pajama', 'peekaboo','phlegm', 'pixel', 'pizazz', 'pneumonia', 'polka',
'pshaw', 'psyche', 'puppy', 'puzzling', 'quartz','queue', 'quips', 'quixotic', 'quiz', 'quizzes', 'quorum', 'razzmatazz', 'rhubarb', 'rhythm', 'rickshaw',
'schnapps', 'scratch', 'shiv', 'snazzy', 'sphinx', 'spritz', 'squawk','staff', 'strength', 'strengths', 'stretch', 'stronghold', 'stymied', 'subway', 'swivel',
'syndrome', 'thriftless', 'thumbscrew', 'topaz', 'transcript', 'transgress', 'transplant', 'triphthong', 'twelfth', 'twelfths', 'unknown', 'unworthy', 'unzip',
'uptown', 'vaporize', 'vixen', 'vodka', 'voodoo', 'vortex', 'voyeurism', 'walkway', 'waltz', 'wave', 'wavy', 'waxy', 'wellspring', 'wheezy', 'whiskey', 'whizzing',
'whomever', 'wimpy', 'witchcraft', 'wizard', 'woozy', 'wristwatch', 'wyvern', 'xylophone', 'yachtsman', 'yippee', 'yoked', 'youthful', 'yummy', 'zephyr',
'zigzag', 'zigzagging', 'zilch', 'zipper', 'zodiac', 'zombie', ]

# Randomly choose a word from the word_list and assign it to a variable called chosen_word.
import random

stages = ['''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========
''', '''
  +---+
  |   |
      |
      |
      |
      |
=========
''']
choosen_word = random.choice(word_list)

# Create a variable called 'lives' to keep track of the number of lives left.
#Set 'lives' to equal 6.
lives = 6

# testing code
print(f'Pssst, the solution is {choosen_word}')

# create blanks
display = []
word_length = len(choosen_word)
for _ in range(word_length):
    display += "_"
print(display)


# Use a while loop to let the user guess again.
# The loop should only stop once the user has guessed all the letters in the choosen_word and 'display' has no mpre blanks("_").
# Then you can tell the user they have won.
end_of_game = False
while not end_of_game:
# guess letter and in lowercase.
    guess = input("Guess a letter: ").lower()

# check guessed letter
    for position in range(word_length):
        letter = choosen_word[position]
        if letter==guess:
            display[position] = letter

# If guess is not a letter in the chosen_word,
#Then reduce 'lives' by 1.
#If lives goes down to 0 then the game should stop and it should print "You lose."
    if guess not in choosen_word:
        lives -= 1
        if lives == 0:
            end_of_game = True
            print("You lose.")

#Join all the elements in the list and turn it into a String.
    print(f"{' '.join(display)}")

#Check if user has got all letters.
    print(display)
    if "_" not in display:
        end_of_game = True
        print("You win!")

# print the ASCII art from 'stages' that corresponds to the current number of 'lives' the user has remaining.
    print(stages[lives])
